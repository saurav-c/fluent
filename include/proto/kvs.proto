//  Copyright 2018 U.C. Berkeley RISE Lab
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

enum RequestType {
  GET = 0;
  PUT = 1;
}

enum LatticeType {
  NO = 0;
  LWW = 1;
  SET = 2;
  CAUSAL = 3;
  CROSSCAUSAL = 4;
}

enum ResponseErrorType {
  TIMEOUT = 0;
  LATTICE = 1;
}

message LWWValue {
  required uint64 timestamp = 1;
  required bytes value = 2;
}

message SetValue {
  repeated string values = 1;
}

message CausalValue {
  map<string, uint32> vector_clock = 1;
  repeated string values = 2;
}

message Dependency {
  required string key = 1;
  map<string, uint32> vector_clock = 2;
}

message CrossCausalValue {
  map<string, uint32> vector_clock = 1;
  repeated Dependency deps = 2;
  repeated string values = 3;
}

message KeyTuple {
  required string key = 1;
  optional LatticeType lattice_type = 2 [default = NO];
  optional uint32 error = 3;
  optional bytes payload = 4;
  optional uint32 address_cache_size = 5;
  optional bool invalidate = 6;
  repeated string addresses = 7;
}

message KeyRequest {
  required RequestType type = 1;
  repeated KeyTuple tuples = 2;
  optional string response_address = 3;
  optional string request_id = 4;
}

message KeyResponse {
  required RequestType type = 1;
  repeated KeyTuple tuples = 2;
  optional string response_id = 3;
  optional uint32 error = 4;
}

message KeyAddressRequest {
  required string response_address = 1;
  repeated string keys = 2;
  optional string request_id = 3;
}

message KeyAddressResponse {
  message KeyAddress {
    required string key = 1;
    repeated string ips = 2;
  }

  repeated KeyAddress addresses = 1;
  required uint32 error = 2;
  optional string response_id = 3;
}

message KeySet {
  repeated string keys = 1;
}

message UserFeedback {
  message KeyLatency {
    required string key = 1;
    required double latency = 2;
  }

  required string uid = 1;
  optional double latency = 2;
  optional bool finish = 3;
  optional double throughput = 4;
  optional bool warmup = 5;
  repeated KeyLatency key_latency = 6;
}
