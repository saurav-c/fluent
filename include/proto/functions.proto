//  Copyright 2018 U.C. Berkeley RISE Lab
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

message Function {
  required string name = 1;
  required bytes body = 2;
}

enum SerializerType {
  DEFAULT = 0;
  STRING = 1;
  NUMPY = 2;
}

enum ErrorType {
  FUNC_NOT_FOUND = 1;
  NOT_PINNED = 2;
  INVALID_TARGET = 3;
  EXEC_ERROR = 4;
}

enum ConsistencyType {
  NORMAL = 0;
  SINGLE = 1;
  CROSS = 2;
}

message Value {
  required bytes body = 1;
  optional SerializerType type = 2;
}

message FunctionCall {
  required string name = 1;
  required uint32 request_id = 2;
  repeated Value args = 3;
  optional string resp_id = 4;
}

message FunctionList {
  repeated string names = 1;
}

message Dag {
  message DagPair {
    required string source = 1;
    required string sink = 2;
  }

  required string name = 1;
  repeated string functions = 2;
  repeated DagPair connections = 3;
}

message ArgList { 
  repeated Value args = 1;
}

message DagCall {
  required string name = 1;
  map<string, ArgList> function_args = 2;
}

message GenericResponse {
  required bool success = 1;
  optional string response_id = 2;
  optional ErrorType error = 3;
}

message ThreadStatus {
  required string ip = 1;
  required uint32 tid = 2;
  repeated string functions = 3;
  optional double utilization = 4;
  required bool running = 5 [default = true];
}

message DagSchedule {
  required string id = 1;
  required Dag dag = 2;
  required string target_function = 3;
  required ConsistencyType consistency = 4 [default = NORMAL]; 
  repeated string triggers = 5;
  map<string, string> locations = 6; // which functions should be executed where
  // the pre-fixed arguments for each stage (i.e., the arguments that do not depend on the previous stage)
  map<string, ArgList> arguments = 7; 
}

message VersionedKey {
  required string key = 1;
  map<string, uint32> vector_clock = 2;
}

message VersionedKeyList { 
  repeated VersionedKey versioned_keys = 1;
}

message DagTrigger {
  required string id = 1;
  required string target_function = 2; // which function is this trigger for
  required string source = 3;
  optional ArgList arguments = 4;
  map<string, VersionedKeyList> versioned_key_locations = 5;
  repeated VersionedKey dependencies = 6;
}

message ExecutorStatistics {
  message FunctionStatistics {
    required string fname = 1;
    optional uint32 call_count = 2;
    optional double runtime = 3;
  }

  repeated FunctionStatistics statistics = 1;
}

message SchedulerStatus {
  message FunctionLocation {
    required string name = 1;
    required string ip = 2;
    required uint32 tid = 3;
  }

  repeated string dags = 1;
  repeated FunctionLocation func_locations = 2; 
}
message CausalTuple {
  required string key = 1;
  optional uint32 error = 2;
  optional bytes payload = 3;
}

message CausalRequest {
  required ConsistencyType consistency = 1;
  required string id = 2;
  repeated CausalTuple tuples = 3;
  repeated string future_read_set = 4;
  map<string, VersionedKeyList> versioned_key_locations = 5;
  optional string response_address = 6;
}

message CausalResponse {
  repeated CausalTuple tuples = 1;
  optional string versioned_key_query_addr = 2;
  repeated VersionedKey versioned_keys = 3;
}

message VersionedKeyRequest {
  required string id = 1;
  required string response_address = 2;
  repeated string keys = 3;
}

message VersionedKeyResponse {
  required string id = 1;
  repeated CausalTuple tuples = 2;
}
